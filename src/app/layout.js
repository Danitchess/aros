"use client"
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Link from 'next/link'
import React, { useState, useEffect } from 'react';


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}) {
  const [menuOpen, setMenuOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [cart, setCart] = useState([])
  const [, setProducts] = useState([]);
  const [headerVisible, setHeaderVisible] = useState(true);

  useEffect(() => {
    const userToken = localStorage.getItem('userToken');
    if (userToken) {
      setIsLoggedIn(true);
    }
  }, []);

  const openMenu = () => {
    setMenuOpen(true);
  };

  const closeMenu = () => {
    setMenuOpen(false);
  };

  const handleLogout = () => {
    localStorage.removeItem('userToken');
    localStorage.removeItem('userEmail');
    setIsLoggedIn(false);
    closeMenu();
  };

  useEffect(() => {
    fetch('http://localhost:5000/products')
      .then((res) => res.json())
      .then((data) => setProducts(data))
      .catch((error) => console.error('Error fetching products:', error));

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const addToCart = (productId, quantity) => {

    const existingItem = cart.find(item => item.id === productId);

    if (existingItem) {

      setCart(
        cart.map(item =>
          item.id === productId ? { ...item, quantity: item.quantity + quantity } : item
        )
      );
    } else {
      fetch('http://localhost:5000/products')
        .then(res => res.json())
        .then(products => {
          const product = products.find(p => p.id === productId);
          if (product) {
            setCart([...cart, { ...product, quantity }]);
          }
        })
        .catch(error => console.error('Error fetching products:', error));
    }
  };

  useEffect(() => {
    let lastScrollY = 0; 
    let cumulativeScroll = 0; 
    const scrollThreshold = 100; 

    const handleScroll = () => {
      const currentScrollY = window.scrollY;

      if (currentScrollY > lastScrollY) {
  
        cumulativeScroll += currentScrollY - lastScrollY;
        if (cumulativeScroll > scrollThreshold) {
          setHeaderVisible(false); 
        }
      } else {
        
        cumulativeScroll = 0; 
        setHeaderVisible(true); 
      }

      lastScrollY = currentScrollY;
    };

    window.addEventListener('scroll', handleScroll);

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  const totalItemsInCart = cart.length;
  return (
    <html lang="fr">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <header className={`header ${headerVisible ? '' : 'hidden'}`}>

<div>
  <Link href="/home"><img id="logo" src="/aros-2.png" alt="logo" height={110} width={160} /></Link>
</div>

<nav className='nav-header'>
  <ul>
    <Link href="/boutique">Boutique</Link>
    <Link href="/à-propos">À propos</Link>
    <Link href="/contact">Contact</Link>
  </ul>

</nav>

<div className='header-btn'>
  <button className='btn-panier'><Link href="/panier"><i className="fa-solid fa-bag-shopping"></i></Link></button>
  {totalItemsInCart > 0 && (
    <span className="nbr-panier-item">{totalItemsInCart}</span>
  )}

  <button className="btn-menu-icon" onClick={openMenu}><i className="fa-solid fa-bars"></i></button>

  <div id="sideMenu" className={`menu-icon ${menuOpen ? 'open' : ''}`}>
    <nav className="btn-close-menu" onClick={closeMenu}>&times;</nav>
    {isLoggedIn ? (
      <>
        <Link className="Link-boutique" href="/boutique" onClick={closeMenu} >Boutique</Link>
        <Link className="Link-page" href="/à-propos" onClick={closeMenu} >À propos</Link>
        <Link className="Link-page" href="/contact" onClick={closeMenu} >Contact</Link>
        <Link className="Link-account" onClick={closeMenu} href="/account"><button className="Link-btn-login-register-account-logout">Mon compte <i className="fa-solid fa-arrow-right"></i></button></Link>
        <nav className="Link-logout" onClick={handleLogout}><button className="Link-btn-login-register-account-logout">Se déconnecter <i className="fa-solid fa-arrow-right"></i></button></nav>
      </>
    ) : (
      <>
        <Link className="Link-boutique" href="/boutique" onClick={closeMenu} >Boutique</Link>
        <Link className="Link-page" href="/à-propos" onClick={closeMenu} >À propos</Link>
        <Link className="Link-page" href="/contact" onClick={closeMenu} >Contact</Link>
        <Link className="Link-login" onClick={closeMenu} href="/se-connecter"><button className="Link-btn-login-register-account-logout">Se connecter <i className="fa-solid fa-arrow-right"></i></button></Link>
        <Link className="Link-register" onClick={closeMenu} href="/s'inscrire"><button className="Link-btn-login-register-account-logout">S'inscrire <i className="fa-solid fa-arrow-right"></i></button></Link>
      </>
    )}
  </div>

  <button className="btn-login-header" onClick={openMenu}><i className="fa-solid fa-user"></i></button>

  <div id="sideMenu" className={`header-login ${menuOpen ? 'open' : ''}`}>
    <nav className="btn-close-menu" onClick={closeMenu}>&times;</nav>
    {isLoggedIn ? (
      <>
        <Link className="Link-account" onClick={closeMenu} href="/account">Mon compte</Link>
        <nav className="Link-logout" onClick={handleLogout}>Se déconnecter</nav>
      </>
    ) : (
      <>
        <Link className="Link-login" onClick={closeMenu} href="/se-connecter">Se connecter</Link>
        <Link className="Link-register" onClick={closeMenu} href="/s'inscrire">S'inscrire</Link>
      </>
    )}
  </div>
</div>


</header>
        {children}
      </body>
    </html>
  );
}
